'name': 'Crystal'
'scopeName': 'source.crystal'
'fileTypes': [
  'cr'
  'Projectfile'
]
'firstLineMatch': '^#!\\s*/.*\\bcrystal'
'patterns': [
  {
    'captures':
      '1':
        'name': 'keyword.control.class.crystal'
      '2':
        'name': 'entity.name.type.class.crystal'
      '4':
        'name': 'entity.other.inherited-class.crystal'
      '5':
        'name': 'punctuation.separator.inheritance.crystal'
      '6':
        'name': 'variable.other.object.crystal'
      '7':
        'name': 'punctuation.definition.variable.crystal'
    'match': '^\\s*(class)\\s+(([.a-zA-Z0-9_:]+(\\s*(<)\\s*[.a-zA-Z0-9_:]+)?)|((<<)\\s*[.a-zA-Z0-9_:]+))'
    'name': 'meta.class.crystal'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.module.crystal'
      '2':
        'name': 'entity.name.type.module.crystal'
      '3':
        'name': 'entity.other.inherited-class.module.first.crystal'
      '4':
        'name': 'punctuation.separator.inheritance.crystal'
      '5':
        'name': 'entity.other.inherited-class.module.second.crystal'
      '6':
        'name': 'punctuation.separator.inheritance.crystal'
      '7':
        'name': 'entity.other.inherited-class.module.third.crystal'
      '8':
        'name': 'punctuation.separator.inheritance.crystal'
    'match': '^\\s*(module)\\s+(([A-Z]\\w*(::))?([A-Z]\\w*(::))?([A-Z]\\w*(::))*[A-Z]\\w*)'
    'name': 'meta.module.crystal'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.enum.crystal'
      '2':
        'name': 'entity.name.type.enum.crystal'
      '3':
        'name': 'entity.other.inherited-class.enum.first.crystal'
      '4':
        'name': 'punctuation.separator.inheritance.crystal'
      '5':
        'name': 'entity.other.inherited-class.enum.second.crystal'
      '6':
        'name': 'punctuation.separator.inheritance.crystal'
      '7':
        'name': 'entity.other.inherited-class.enum.third.crystal'
      '8':
        'name': 'punctuation.separator.inheritance.crystal'
    'match': '^\\s*(enum)\\s+(([A-Z]\\w*(::))?([A-Z]\\w*(::))?([A-Z]\\w*(::))*[A-Z]\\w*)'
    'name': 'meta.enum.crystal'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.struct.crystal'
      '2':
        'name': 'entity.name.type.struct.crystal'
      '3':
        'name': 'entity.other.inherited-class.struct.first.crystal'
      '4':
        'name': 'punctuation.separator.inheritance.crystal'
      '5':
        'name': 'entity.other.inherited-class.struct.second.crystal'
      '6':
        'name': 'punctuation.separator.inheritance.crystal'
      '7':
        'name': 'entity.other.inherited-class.struct.third.crystal'
      '8':
        'name': 'punctuation.separator.inheritance.crystal'
    'match': '^\\s*(struct)\\s+(([A-Z]\\w*(::))?([A-Z]\\w*(::))?([A-Z]\\w*(::))*[A-Z]\\w*)'
    'name': 'meta.struct.crystal'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.lib.crystal'
      '2':
        'name': 'entity.name.type.lib.crystal'
    'match': '^\\s*(lib)\\s+([A-Z]\\w*)'
    'name': 'meta.lib.crystal'
  }
  {
    'comment': 'else if is a common mistake carried over from other languages.
      it works if you put in a second end, but it’s never what you want.'
    'match': '(?<!\\.)\\belse(\\s)+if\\b'
    'name': 'invalid.deprecated.crystal'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.constant.hashkey.crystal'
    'comment': 'symbols as hash key (1.9 syntax)'
    'match': '(?>[a-zA-Z_]\\w*(?>[?!])?)(:)(?!:)'
    'name': 'constant.other.symbol.hashkey.crystal'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.constant.crystal'
    'comment': 'symbols as hash key (1.8 syntax)'
    'match': '(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!])?)(?=\\s*=>)'
    'name': 'constant.other.symbol.hashkey.crystal'
  }
  {
    'comment': 'everything being a reserved word, not a value and needing a
      \'end\' is a..'
    'match': '(?<!\\.)\\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\\b(?![?!])'
    'name': 'keyword.control.crystal'
  }
  {
    'comment': 'contextual smart pair support for block parameters'
    'match': '(?<!\\.)\\bdo\\b\\s*'
    'name': 'keyword.control.start-block.crystal'
  }
  {
    'comment': 'contextual smart pair support'
    'match': '(?<=\\{)(\\s+)'
    'name': 'meta.syntax.crystal.start-block'
  }
  {
    'comment': ' as above, just doesn\'t need a \'end\' and does a logic
      operation'
    'match': '(?<!\\.)\\b(and|not|or)\\b'
    'name': 'keyword.operator.logical.crystal'
  }
  {
    'comment': ' just as above but being not a logical operation'
    'match': '(?<!\\.)\\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield|as|with)\\b(?![?!])|\\bdefined\\?|\\bblock_given\\?'
    'name': 'keyword.control.pseudo-method.crystal'
  }
  {
    'match': '\\bnil\\b(?![?!])'
    'name': 'constant.language.nil.crystal'
  }
  {
    'match': '\\b(true|false)\\b(?![?!])'
    'name': 'constant.language.boolean.crystal'
  }
  {
    'match': '\\b(__(FILE|LINE)__)\\b(?![?!])'
    'name': 'variable.language.crystal'
  }
  {
    'match': '\\bself\\b(?![?!])'
    'name': 'variable.language.self.crystal'
  }
  {
    'comment': ' everything being a method but having a special function is a..'
    'match': '\\b(initialize|new|loop|include|extend|prepend|raise|fail|getter|setter|property|catch|throw|module_function|sizeof|instance_sizeof|pointerof)\\b(?![?!])'
    'name': 'keyword.other.special-method.crystal'
  }
  {
    'begin': '\\b(require)\\b'
    'captures':
      '1':
        'name': 'keyword.other.special-method.crystal'
    'end': '$|(?=#|\\})'
    'name': 'meta.require.crystal'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.variable.crystal'
    'match': '(@)[a-zA-Z_]\\w*'
    'name': 'variable.other.readwrite.instance.crystal'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.variable.crystal'
    'match': '(@@)[a-zA-Z_]\\w*'
    'name': 'variable.other.readwrite.class.crystal'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.variable.crystal'
    'match': '(\\$)[a-zA-Z_]\\w*'
    'name': 'variable.other.readwrite.global.crystal'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.variable.crystal'
    'match': '(\\$)(!|@|&|`|\'|\\+|\\d+|~|=|/|\\\\|,|;|\\.|<|>|_|\\*|\\$|\\?|:|"|-[0adFiIlpv])'
    'name': 'variable.other.readwrite.global.pre-defined.crystal'
  }
  {
    'begin': '\\b(ENV)\\['
    'beginCaptures':
      '1':
        'name': 'variable.other.constant.crystal'
    'end': '\\]'
    'name': 'meta.environment-variable.crystal'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'match': '\\b[A-Z]\\w*(?=((\\.|::)[A-Za-z]|\\[))'
    'name': 'support.class.crystal'
  }
  {
    'match': '\\b(abort|at_exit|autoload\\??|binding|callcc|caller|caller_locations|chomp|chop|eval|exec|exit|exit!|fork|format|gets|global_variables|gsub|iterator\\?|lambda|load|local_variables|open|p|print|printf|proc|putc|puts|rand|readline|readlines|select|set_trace_func|sleep|spawn|sprintf|srand|sub|syscall|system|test|trace_var|trap|untrace_var|warn)\\b(?![?!])'
    'name': 'support.function.kernel.crystal'
  }
  {
    'match': '\\b[A-Z]\\w*\\b'
    'name': 'variable.other.constant.crystal'
  }
  {
    'match': '(?:(private|protected) def)'
    'name': 'keyword.control.def.visibility.crystal'
  }
  {
    'match': '(?:(macro) def)'
    'name': 'keyword.control.def.macro.crystal'
  }
  {
    'begin': '(?x)\n\t\t\t         (?=def\\b)                                                      # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(def)\\s+                                              # the def keyword\n\t\t\t         ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                   # a method name prefix\n\t\t\t           (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                              # the method name\n\t\t\t           |===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )  # …or an operator method\n\t\t\t         \\s*(\\()                                                        # the openning parenthesis for arguments\n\t\t\t        '
    'beginCaptures':
      '1':
        'name': 'keyword.control.def.crystal'
      '2':
        'name': 'entity.name.function.crystal'
      '3':
        'name': 'punctuation.definition.parameters.crystal'
    'comment': 'the method pattern comes from the symbol pattern, see there for
      a explaination'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.parameters.crystal'
    'name': 'meta.function.method.with-arguments.crystal'
    'patterns': [
      {
        'begin': '(?![\\s,)])'
        'end': '(?=[,)])'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'storage.type.variable.crystal'
              '2':
                'name': 'variable.parameter.function.crystal'
            'match': '\\G([&*]?)([_a-zA-Z][_a-zA-Z0-9]*)'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?x)\n\t\t\t         (?=def\\b)                                                      # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(def)\\s+                                              # the def keyword\n\t\t\t         ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                   # a method name prefix\n\t\t\t           (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                              # the method name\n\t\t\t           |===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )  # …or an operator method\n\t\t\t         [ \\t]                                                          # the space separating the arguments\n\t\t\t         (?=[ \\t]*[^\\s#;])                                              # make sure arguments and not a comment follow\n\t\t\t        '
    'beginCaptures':
      '1':
        'name': 'keyword.control.def.crystal'
      '2':
        'name': 'entity.name.function.crystal'
    'comment': 'same as the previous rule, but without parentheses around the
      arguments'
    'end': '$'
    'name': 'meta.function.method.with-arguments.crystal'
    'patterns': [
      {
        'begin': '(?![\\s,])'
        'end': '(?=,|$)'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'punctuation.definition.variable.crystal'
            'match': '\\G([&*]?)[_a-zA-Z][_a-zA-Z0-9]*'
            'name': 'variable.parameter.function.crystal'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.def.crystal'
      '3':
        'name': 'entity.name.function.crystal'
    'comment': ' the optional name is just to catch the def also without a
      method-name'
    'match': '(?x)\n\t\t\t         (?=def\\b)                                                           # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(def)\\b                                                    # the def keyword\n\t\t\t         ( \\s+                                                               # an optional group of whitespace followed by…\n\t\t\t           ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                      # a method name prefix\n\t\t\t             (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                                 # the method name\n\t\t\t             |===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) ) )?  # …or an operator method\n\t\t\t        '
    'name': 'meta.function.method.without-arguments.crystal'
  }
  {
    'match': '\\b(0[xX]\\h(?>_?\\h)*|\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?|0[bB][01]+)\\b'
    'name': 'constant.numeric.crystal'
  }
  {
    'begin': ':"'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.symbol.begin.crystal'
    'comment': 'symbol literal with "" delimitor'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.section.symbol.end.crystal'
    'name': 'constant.other.symbol.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'comment': 'Needs higher precidence than regular expressions.'
    'match': '(?<!\\()/='
    'name': 'keyword.operator.assignment.augmented.crystal'
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.char.begin.crystal'
    'comment': "char literal with '' delimitor"
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.char.end.crystal'
    'name': 'string.literal.char.crystal'
    'patterns': [
      {
        'match': '\\\\\'|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with interpolation and "" delimitor'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.double.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '`'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'execute string (allows for interpolation)'
    'end': '`'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '%x\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'execute string (allow for interpolation)'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_curly_i'
      }
    ]
  }
  {
    'begin': '%x\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'execute string (allow for interpolation)'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_brackets_i'
      }
    ]
  }
  {
    'begin': '%x\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'execute string (allow for interpolation)'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_ltgt_i'
      }
    ]
  }
  {
    'begin': '%x\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'execute string (allow for interpolation)'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_parens_i'
      }
    ]
  }
  {
    'begin': '%x([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'execute string (allow for interpolation)'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '(?<![\\w)])((/))(?![*+?])(?=(?:\\\\/|[^/])*/[eimnosux]*\\s*([\\]#).,?:}]|$|\\|\\||&&))'
    'captures':
      '1':
        'name': 'string.regexp.interpolated.crystal'
      '2':
        'name': 'punctuation.section.regexp.crystal'
    'comment': 'regular expression literal with interpolation'
    'contentName': 'string.regexp.interpolated.crystal'
    'end': '((/[eimnosux]*))(?=[^eimnosux])'
    'patterns': [
      {
        'include': '#regex_sub'
      }
    ]
  }
  {
    'begin': '%r\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.regexp.begin.crystal'
    'comment': 'regular expression literal with interpolation and {} delimitor'
    'end': '\\}[eimnosux]*'
    'endCaptures':
      '0':
        'name': 'punctuation.section.regexp.end.crystal'
    'name': 'string.regexp.interpolated.crystal'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_curly_r'
      }
    ]
  }
  {
    'begin': '%r\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.section.regexp.begin.crystal'
    'comment': 'regular expression literal with interpolation and [] delimitor'
    'end': '\\][eimnosux]*'
    'endCaptures':
      '0':
        'name': 'punctuation.section.regexp.end.crystal'
    'name': 'string.regexp.interpolated.crystal'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_brackets_r'
      }
    ]
  }
  {
    'begin': '%r\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.regexp.begin.crystal'
    'comment': 'regular expression literal with interpolation and () delimitor'
    'end': '\\)[eimnosux]*'
    'endCaptures':
      '0':
        'name': 'punctuation.section.regexp.end.crystal'
    'name': 'string.regexp.interpolated.crystal'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_parens_r'
      }
    ]
  }
  {
    'begin': '%r\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.regexp.begin.crystal'
    'comment': 'regular expression literal with interpolation and <> delimitor'
    'end': '\\>[eimnosux]*'
    'endCaptures':
      '0':
        'name': 'punctuation.section.regexp.end.crystal'
    'name': 'string.regexp.interpolated.crystal'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_ltgt_r'
      }
    ]
  }
  {
    'begin': '%r([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.regexp.begin.crystal'
    'comment': 'regular expression literal with interpolation and {} delimitor'
    'end': '\\1[eimnosux]*'
    'endCaptures':
      '0':
        'name': 'punctuation.section.regexp.end.crystal'
    'name': 'string.regexp.interpolated.crystal'
    'patterns': [
      {
        'include': '#regex_sub'
      }
    ]
  }
  {
    'begin': '%I\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with interpolation and [] delimitor'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_brackets_i'
      }
    ]
  }
  {
    'begin': '%I\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with interpolation and () delimitor'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_parens_i'
      }
    ]
  }
  {
    'begin': '%I\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with interpolation and <> delimitor'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_ltgt_i'
      }
    ]
  }
  {
    'begin': '%I\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with interpolation and {} delimitor'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_curly_i'
      }
    ]
  }
  {
    'begin': '%I([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with interpolation and wildcard
      delimitor'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '%i\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with [] delimitor'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\]|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_brackets'
      }
    ]
  }
  {
    'begin': '%i\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with () delimitor'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\)|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_parens'
      }
    ]
  }
  {
    'begin': '%i\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with <> delimitor'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\>|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_ltgt'
      }
    ]
  }
  {
    'begin': '%i\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with {} delimitor'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\}|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_curly'
      }
    ]
  }
  {
    'begin': '%i([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of symbols literal with wildcard delimitor'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'comment': 'Cant be named because its not neccesarily an escape.'
        'match': '\\\\.'
      }
    ]
  }
  {
    'begin': '%W\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with interpolation and [] delimitor'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_brackets_i'
      }
    ]
  }
  {
    'begin': '%W\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with interpolation and () delimitor'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_parens_i'
      }
    ]
  }
  {
    'begin': '%W\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with interpolation and <> delimitor'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_ltgt_i'
      }
    ]
  }
  {
    'begin': '%W\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with interpolation and {} delimitor'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_curly_i'
      }
    ]
  }
  {
    'begin': '%W([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with interpolation and wildcard
      delimitor'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '%w\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with [] delimitor'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\]|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_brackets'
      }
    ]
  }
  {
    'begin': '%w\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with () delimitor'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\)|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_parens'
      }
    ]
  }
  {
    'begin': '%w\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with <> delimitor'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\>|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_ltgt'
      }
    ]
  }
  {
    'begin': '%w\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with {} delimitor'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\}|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_curly'
      }
    ]
  }
  {
    'begin': '%w([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.array.begin.crystal'
    'comment': 'array of strings literal with wildcard delimitor'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.section.array.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'comment': 'Cant be named because its not neccesarily an escape.'
        'match': '\\\\.'
      }
    ]
  }
  {
    'begin': '%Q\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with interpolation and () delimitor'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_parens_i'
      }
    ]
  }
  {
    'begin': '%Q\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with interpolation and [] delimitor'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_brackets_i'
      }
    ]
  }
  {
    'begin': '%Q\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with interpolation and <> delimitor'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_ltgt_i'
      }
    ]
  }
  {
    'begin': '%Q\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with interpolation and {} delimitor'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_curly_i'
      }
    ]
  }
  {
    'begin': '%Q([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with interpolation and wildcard delimitor'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '%\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_curly'
      }
    ]
  }
  {
    'begin': '%\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_brackets'
      }
    ]
  }
  {
    'begin': '%\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_parens'
      }
    ]
  }
  {
    'begin': '%\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.interpolated.crystal'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_ltgt'
      }
    ]
  }
  # I've disabled this syntax because it conflicts with Crystal's macro Syntax.
  # I may altogether remove this section if it does not cause further issue down
  #   the road.
  #{
  #  'begin': '%([^\\w\\s=])'
  #  'beginCaptures':
  #    '0':
  #      'name': 'punctuation.definition.string.begin.crystal'
  #  'comment': 'string literal with interpolation and wildcard delimitor'
  #  'end': '\\1'
  #  'endCaptures':
  #    '0':
  #      'name': 'punctuation.definition.string.end.crystal'
  #  'name': 'string.quoted.other.interpolated.crystal'
  #  'patterns': [
  #    {
  #      'include': '#interpolated_crystal'
  #    }
  #    {
  #      'include': '#escaped_char'
  #    }
  #  ]
  #}
  {
    'begin': '%q\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with () delimitor'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\)|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_parens'
      }
    ]
  }
  {
    'begin': '%q\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with <> delimitor'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\>|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_ltgt'
      }
    ]
  }
  {
    'begin': '%q\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with [] delimitor'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\]|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_brackets'
      }
    ]
  }
  {
    'begin': '%q\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with {} delimitor'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'match': '\\\\\\}|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_curly'
      }
    ]
  }
  {
    'begin': '%q([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'string literal with wildcard delimitor'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.quoted.other.crystal'
    'patterns': [
      {
        'comment': 'Cant be named because its not neccesarily an escape.'
        'match': '\\\\.'
      }
    ]
  }
  {
    'begin': '%s\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.symbol.begin.crystal'
    'comment': 'symbol literal with () delimitor'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.symbol.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\)|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_parens'
      }
    ]
  }
  {
    'begin': '%s\\<'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.symbol.begin.crystal'
    'comment': 'symbol literal with <> delimitor'
    'end': '\\>'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.symbol.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\>|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_ltgt'
      }
    ]
  }
  {
    'begin': '%s\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.symbol.begin.crystal'
    'comment': 'symbol literal with [] delimitor'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.symbol.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\]|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_brackets'
      }
    ]
  }
  {
    'begin': '%s\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.symbol.begin.crystal'
    'comment': 'symbol literal with {} delimitor'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.symbol.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'match': '\\\\\\}|\\\\\\\\'
        'name': 'constant.character.escape.crystal'
      }
      {
        'include': '#nest_curly'
      }
    ]
  }
  {
    'begin': '%s([^\\w])'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.symbol.begin.crystal'
    'comment': 'symbol literal with wildcard delimitor'
    'end': '\\1'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.symbol.end.crystal'
    'name': 'constant.other.symbol.crystal'
    'patterns': [
      {
        'comment': 'Cant be named because its not neccesarily an escape.'
        'match': '\\\\.'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.constant.crystal'
    'comment': 'symbols'
    'match': '(?<!:)(:)(?>[$a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?|===?|>[>=]?|<[<=]?|<=>|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?|@@?[a-zA-Z_]\\w*)'
    'name': 'constant.other.symbol.crystal'
  }
  {
    'begin': '^=begin'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.crystal'
    'comment': 'multiline comments'
    'end': '^=end'
    'name': 'comment.block.documentation.crystal'
  }
  {
    'begin': '(^[ \\t]+)?(?=#)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.crystal'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.crystal'
        'end': '\\n'
        'name': 'comment.line.number-sign.crystal'
        'patterns': [
          {
            'include': '#yard'
          }
        ]
      }
    ]
  }
  {
    'comment': '\n\t\t\tmatches questionmark-letters.\n\n\t\t\texamples(1st alternation = hex):\n\t\t\t?\\x1     ?\\x61\n\n\t\t\texamples (2nd alternation = octal):\n\t\t\t?\\0      ?\\07     ?\\017\n\n\t\t\texamples (3rd alternation = escaped):\n\t\t\t?\\n      ?\\b\n\n\t\t\texamples (4th alternation = meta-ctrl):\n\t\t\t?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a\n\n\t\t\texamples (4th alternation = normal):\n\t\t\t?a       ?A       ?0 \n\t\t\t?*       ?"       ?( \n\t\t\t?.       ?#\n\t\t\t\n\t\t\t\n\t\t\tthe negative lookbehind prevents against matching\n\t\t\tp(42.tainted?)\n\t\t\t'
    'match': '(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])'
    'name': 'constant.numeric.crystal'
  }
  {
    'begin': '^__END__\\n'
    'captures':
      '0':
        'name': 'string.unquoted.program-block.crystal'
    'comment': '__END__ marker'
    'contentName': 'text.plain'
    'end': '(?=not)impossible'
    'patterns': [
      {
        'begin': '(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))'
        'end': '(?=not)impossible'
        'name': 'text.html.embedded.crystal'
        'patterns': [
          {
            'include': 'text.html.basic'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)HTML)\\b\\1))'
    'comment': 'Heredoc with embedded html'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.html'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)HTML)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'text.html'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'text.html.basic'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)SQL)\\b\\1))'
    'comment': 'Heredoc with embedded sql'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.sql'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)SQL)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.sql'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.sql'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)CSS)\\b\\1))'
    'comment': 'Heredoc with embedded css'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.css'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)CSS)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.css'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.css'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)CPP)\\b\\1))'
    'comment': 'Heredoc with embedded c++'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.cpp'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)CPP)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.cpp'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }

          # TODO: remove once new language-c package is released with the
          # 'source.cpp' scope name
          {
            'include': 'source.c++'
          }

          {
            'include': 'source.cpp'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)C)\\b\\1))'
    'comment': 'Heredoc with embedded c'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.c'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)C)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.c'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.c'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1))'
    'comment': 'Heredoc with embedded javascript'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.js'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.js'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.js'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)JQUERY)\\b\\1))'
    'comment': 'Heredoc with embedded jQuery javascript'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.js.jquery'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)JQUERY)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.js.jquery'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.js.jquery'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1))'
    'comment': 'Heredoc with embedded shell'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.shell'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.shell'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.shell'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)LUA)\\b\\1))'
    'comment': 'Heredoc with embedded lua'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.lua'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)LUA)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.lua'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.lua'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?=(?><<-("?)((?:[_\\w]+_|)crystal)\\b\\1))'
    'comment': 'Heredoc with embedded crystal'
    'end': '(?!\\G)'
    'name': 'meta.embedded.block.crystal'
    'patterns': [
      {
        'begin': '(?><<-("?)((?:[_\\w]+_|)crystal)\\b\\1)'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.crystal'
        'contentName': 'source.crystal'
        'end': '\\s*\\2$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.crystal'
        'name': 'string.unquoted.heredoc.crystal'
        'patterns': [
          {
            'include': '#heredoc'
          }
          {
            'include': '#interpolated_crystal'
          }
          {
            'include': 'source.crystal'
          }
          {
            'include': '#escaped_char'
          }
        ]
      }
    ]
  }
  {
    'begin': '(?>\\=\\s*<<(\\w+))'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'end': '^\\1$'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.unquoted.heredoc.crystal'
    'patterns': [
      {
        'include': '#heredoc'
      }
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '(?><<-(\\w+))'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.crystal'
    'comment': 'heredoc with indented terminator'
    'end': '\\s*\\1$'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.crystal'
    'name': 'string.unquoted.heredoc.crystal'
    'patterns': [
      {
        'include': '#heredoc'
      }
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '(?<=\\{|do|\\{\\s|do\\s)(\\|)'
    'captures':
      '1':
        'name': 'punctuation.separator.variable.crystal'
    'end': '(\\|)'
    'patterns': [
      {
        'match': '[_a-zA-Z][_a-zA-Z0-9]*'
        'name': 'variable.other.block.crystal'
      }
      {
        'match': ','
        'name': 'punctuation.separator.variable.crystal'
      }
    ]
  }
  {
    'match': '=>'
    'name': 'punctuation.separator.key-value'
  }
  {
    'match': '<<=|%=|&{1,2}=|\\*=|\\*\\*=|\\+=|\\-=|\\^=|\\|{1,2}=|<<'
    'name': 'keyword.operator.assignment.augmented.crystal'
  }
  {
    'match': '<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \\t])\\?'
    'name': 'keyword.operator.comparison.crystal'
  }
  {
    'match': '(?<=[ \\t])!+|\\bnot\\b|&&|\\band\\b|\\|\\||\\bor\\b|\\^'
    'name': 'keyword.operator.logical.crystal'
  }
  {
    'match': '(%|&|\\*\\*|\\*|\\+|\\-|/)'
    'name': 'keyword.operator.arithmetic.crystal'
  }
  {
    'match': '='
    'name': 'keyword.operator.assignment.crystal'
  }
  {
    'match': '\\||~|>>'
    'name': 'keyword.operator.other.crystal'
  }
  {
    'match': ':'
    'name': 'punctuation.separator.other.crystal'
  }
  {
    'match': '\\;'
    'name': 'punctuation.separator.statement.crystal'
  }
  {
    'match': ','
    'name': 'punctuation.separator.object.crystal'
  }
  {
    'match': '\\.|::'
    'name': 'punctuation.separator.method.crystal'
  }
  {
    'match': '\\{'
    'name': 'punctuation.section.scope.begin.crystal'
  }
  {
    'match': '\\}'
    'name': 'punctuation.section.scope.end.crystal'
  }
  {
    'match': '\\['
    'name': 'punctuation.section.array.begin.crystal'
  }
  {
    'match': '\\]'
    'name': 'punctuation.section.array.end.crystal'
  }
  {
    'match': '\\(|\\)'
    'name': 'punctuation.section.function.crystal'
  }
]
'repository':
  'escaped_char':
    'match': '\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)'
    'name': 'constant.character.escape.crystal'
  'heredoc':
    'begin': '^<<-?\\w+'
    'end': '$'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'interpolated_crystal':
    'patterns': [
      {
        'begin': '(#\\{)'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.crystal'
          '1':
            'name': 'source.crystal'
        'contentName': 'source.crystal'
        'end': '(\\})'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.crystal'
          '1':
            'name': 'source.crystal'
        'name': 'meta.embedded.line.crystal'
        'patterns': [
          {
            'include': '#nest_curly_and_self'
          }
          {
            'include': '$self'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.crystal'
        'match': '(#@)[a-zA-Z_]\\w*'
        'name': 'variable.other.readwrite.instance.crystal'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.crystal'
        'match': '(#@@)[a-zA-Z_]\\w*'
        'name': 'variable.other.readwrite.class.crystal'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.crystal'
        'match': '(#\\$)[a-zA-Z_]\\w*'
        'name': 'variable.other.readwrite.global.crystal'
      }
    ]
  'nest_brackets':
    'begin': '\\['
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\]'
    'patterns': [
      {
        'include': '#nest_brackets'
      }
    ]
  'nest_brackets_i':
    'begin': '\\['
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\]'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_brackets_i'
      }
    ]
  'nest_brackets_r':
    'begin': '\\['
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\]'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_brackets_r'
      }
    ]
  'nest_curly':
    'begin': '\\{'
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\}'
    'patterns': [
      {
        'include': '#nest_curly'
      }
    ]
  'nest_curly_and_self':
    'patterns': [
      {
        'begin': '\\{'
        'captures':
          '0':
            'name': 'punctuation.section.scope.crystal'
        'end': '\\}'
        'patterns': [
          {
            'include': '#nest_curly_and_self'
          }
        ]
      }
      {
        'include': '$self'
      }
    ]
  'nest_curly_i':
    'begin': '\\{'
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\}'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_curly_i'
      }
    ]
  'nest_curly_r':
    'begin': '\\{'
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\}'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_curly_r'
      }
    ]
  'nest_ltgt':
    'begin': '\\<'
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\>'
    'patterns': [
      {
        'include': '#nest_ltgt'
      }
    ]
  'nest_ltgt_i':
    'begin': '\\<'
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\>'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_ltgt_i'
      }
    ]
  'nest_ltgt_r':
    'begin': '\\<'
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\>'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_ltgt_r'
      }
    ]
  'nest_parens':
    'begin': '\\('
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\)'
    'patterns': [
      {
        'include': '#nest_parens'
      }
    ]
  'nest_parens_i':
    'begin': '\\('
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\)'
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nest_parens_i'
      }
    ]
  'nest_parens_r':
    'begin': '\\('
    'captures':
      '0':
        'name': 'punctuation.section.scope.crystal'
    'end': '\\)'
    'patterns': [
      {
        'include': '#regex_sub'
      }
      {
        'include': '#nest_parens_r'
      }
    ]
  'regex_sub':
    'patterns': [
      {
        'include': '#interpolated_crystal'
      }
      {
        'include': '#escaped_char'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.arbitrary-repetition.crystal'
          '3':
            'name': 'punctuation.definition.arbitrary-repetition.crystal'
        'match': '(\\{)\\d+(,\\d+)?(\\})'
        'name': 'string.regexp.arbitrary-repetition.crystal'
      }
      {
        'begin': '\\[(?:\\^?\\])?'
        'captures':
          '0':
            'name': 'punctuation.definition.character-class.crystal'
        'end': '\\]'
        'name': 'string.regexp.character-class.crystal'
        'patterns': [
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '\\(\\?#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.crystal'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.crystal'
        'name': 'comment.line.number-sign.crystal'
        'patterns': [
          {
            'include': '#escaped_char'
          }
        ]
      }
      {
        'begin': '\\('
        'captures':
          '0':
            'name': 'punctuation.definition.group.crystal'
        'end': '\\)'
        'name': 'string.regexp.group.crystal'
        'patterns': [
          {
            'include': '#regex_sub'
          }
        ]
      }
      {
        'begin': '(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.comment.crystal'
        'comment': 'We are restrictive in what we allow to go after the comment
          character to avoid false positives, since the availability of comments
          depend on regexp flags.'
        'end': '$\\n?'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.crystal'
        'name': 'comment.line.number-sign.crystal'
      }
    ]
